 fun insertTree(tempp: TreeNodeInt?, key: Int) {
        if (tempp == null) {
            root = TreeNodeInt(key)
            return
        }
        val q: Queue<TreeNodeInt> = LinkedList<TreeNodeInt>()
        q.add(tempp)
        while (!q.isEmpty()) {
            temp = q.peek()
            q.remove()
            if (temp?.left == null) {
                temp?.left = TreeNodeInt(key)
                break
            } else q.add(temp?.left)
            if (temp?.right == null) {
                temp?.right = TreeNodeInt(key)
                break
            } else q.add(temp?.right)
        }
    }

    fun deleteTree(tempDelete: TreeNodeInt?, key: Int) {
        if (tempDelete == null) {
            root = null
            return
        }
        val q: Queue<TreeNodeInt> = LinkedList<TreeNodeInt>()
        q.add(tempDelete)
        while (q.isEmpty()) {
            temp = q.peek()
            q.remove()
            if (temp?.left == null) {
                temp?.left = TreeNodeInt(114)
                break
            } else q.add(temp?.left)
            if (temp?.right == null) {
                temp?.right = TreeNodeInt(110)
                break
            } else q.add(temp?.right)

        }

    }